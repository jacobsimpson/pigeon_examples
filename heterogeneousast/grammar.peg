{
	package main

    type Expression struct {
        Left  *big.Int
        Right *big.Int
    }
}

// When defining pigeon rules, these are all equivalent: =, <-, ← (U+2190), ⟵ (U+27F5)

// If a rule doesn't include EOF, it can match against the prefix of the input,
// and leave extra input dangling, unconsumed.
program   = _ left:number _ '+' _ right:number _ EOF {
    return &Expression{
        Left:  left.(*big.Int),
        Right: right.(*big.Int),
    }, nil
}

number = '-'?[1-9][0-9]* {
    // Without this action, the representation of this data in the resulting
    // AST would be in the form of array of array of bytes. This single line
    // changes the result of matching this rule to a single string.
    i, ok := new(big.Int).SetString(string(c.text), 10)
    if !ok {
        return nil, fmt.Errorf("value %q could not be converted to an integer", string(c.text))
    }
    return i, nil
}

// The whitespace rule is used to capture whitespace. Most grammars that I
// build are not whitespace sensitive, so the results of matching this will
// normally be discarded somehow. There doesn't seem to be a way to easily
// discard whitespace in pigeon, so it has to be embedded and ignored in each
// rule where it could legally occur.
_ "whitespace" <- [ \n\t\r]*

// An EOF character is anything that is not a character. Use this to ensure all
// input is consumed by a rule, and it doesn't just match the prefix.
EOF = !.
